name: Release

on:
  push:
    branches: [main]
    tags: ["v*"]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install semantic-release and plugins
        run: |
          npm init -y
          npm install --save-dev \
            semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/github \
            @semantic-release/git \
            conventional-changelog-conventionalcommits

      - name: Run semantic-release
        id: semantic
        run: |
          echo "Running semantic-release..."
          RELEASE_OUTPUT=$(npx semantic-release 2>&1 | tee semantic-output.txt)
          echo $RELEASE_OUTPUT

          # Parse tag from output
          RELEASE_TAG=$(grep 'Published release' semantic-output.txt | sed -E 's/.*Published release ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

          if [ -n "$RELEASE_TAG" ]; then
            echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
            echo "released=true" >> $GITHUB_OUTPUT
          else
            echo "released=false" >> $GITHUB_OUTPUT
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}

      - name: Print release info
        run: |
          echo "Released? ${{ steps.semantic.outputs.released }}"
          echo "Tag: ${{ steps.semantic.outputs.release_tag }}"

      - name: Setup Go
        if: steps.semantic.outputs.released == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Run GoReleaser
        if: steps.semantic.outputs.released == 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
